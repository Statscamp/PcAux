% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/01_PcAuxData.R
\docType{class}
\name{PcAuxData-class}
\alias{PcAuxData-class}
\alias{PcAuxData}
\title{Defines the PcAuxData class}
\description{
The PcAuxData class is used instead of passing around a
data table to overcome memory usage limitations.
}
\details{
PcAuxData is the primary object of PcAux
}
\section{Methods}{

\describe{
\item{\code{addVars(x, names = NULL)}}{Add columns to 'data'}

\item{\code{binGroupVars(undo = FALSE)}}{Discretize continuous grouping variables}

\item{\code{castData()}}{Cast all variables to the appropriate measurement level}

\item{\code{castNomVars(toNumeric = TRUE)}}{Swap factor and dummy-coded representations of nominal variables}

\item{\code{castOrdVars(toNumeric = TRUE)}}{Cast ordinal factors to numeric variables}

\item{\code{checkTypes()}}{Check each variable for a sensible number of levels}

\item{\code{cleanCollinVars(x)}}{Remove one variable from all collinear pairs}

\item{\code{codeNomVars()}}{Dummy code nominal factors}

\item{\code{completeMiData()}}{Complete the multiply imputed data sets}

\item{\code{computeInteract()}}{Calculate interaction terms}

\item{\code{computePoly()}}{Compute polynomial terms}

\item{\code{countResponses(
  countMissing = FALSE,
  asProportion = FALSE,
  strict = FALSE,
  initialPm = FALSE
)}}{Calculate the variable-wise response counts}

\item{\code{countVarLevels()}}{Count the levels for each column in 'data'}

\item{\code{createMethVec(initialImp = FALSE, micemethods = micemethods)}}{Populate a vector of elementary imputation methods}

\item{\code{createPatterns()}}{Create patterns to use for group-mean substitution}

\item{\code{fillConstants()}}{Fill constant columns with the appropriate value}

\item{\code{fillNomCell(name)}}{Fill single missing nominal cells via marginal sampling}

\item{\code{findConstCols()}}{Locate and fill constant columns in 'data'}

\item{\code{findEmptyVars(remove = TRUE)}}{Flag empty variables}

\item{\code{findHighPmVars()}}{Flag variables with few responses}

\item{\code{getControl()}}{Retrieve the control parameters}

\item{\code{getPcAux(type = NULL)}}{Retrieve the principal component auxiliary scores}

\item{\code{getPoly(power = NULL)}}{Retrieve the polynomial expansions of 'data'}

\item{\code{getRSquared(type = NULL)}}{Retrieve the R-Squareds for the PcAux scores}

\item{\code{idToCharacter()}}{If any IDs are factors, cast them as character objects}

\item{\code{initialize(
  data = data.frame(NULL),
  nComps = vector("numeric"),
  nImps = 0L,
  nomVars = vector("character"),
  ordVars = vector("character"),
  idVars = vector("character"),
  dropVars = matrix(NA, 1, 2),
  moderators = vector("character"),
  groupVars = vector("character"),
  seed = as.integer(NA),
  forcePmm = FALSE,
  simMode = FALSE,
  verbose = 0L,
  maxPower = 3L,
  intMeth = 0L,
  nProcess = 1L,
  miceIters = 10L,
  miceRidge = 1e-05,
  maxNetWts = 10000L,
  nomMaxLev = 10L,
  ordMaxLev = 10L,
  conMinLev = 10L,
  pcaMemLev = 0L,
  collinThresh = 0.95,
  minItemPredCor = 0.1,
  nGVarCats = 3L,
  checkStatus = "none",
  useQuickPred = FALSE,
  minRespCount = as.integer(floor(0.05 * nrow(data))),
  minPcPredCor = 0.1,
  minPcPredCount = 1L
)}}{Initialize an object of class PcAuxData}

\item{\code{removeVars(x, reason, recordOnly = FALSE)}}{Remove columns from 'data' and store their meta-data}

\item{\code{setControl(x)}}{Assign the control parameters}

\item{\code{setMethVec(x, index = NULL)}}{Update the elementary imputation method vector}

\item{\code{setNComps(type)}}{Set the number of PcAux to extract}

\item{\code{setPcAux(x, type = NULL)}}{Modify the list of principal component auxiliaries}

\item{\code{setPoly(x, power = NULL)}}{Modify the list of polynomial expansions of 'data'}

\item{\code{setRSquared(x, type = NULL)}}{Modify the list of R-Squared values for the PcAux scores}

\item{\code{setStatus(step = "start")}}{Set machine specs and encumbrance}

\item{\code{setTime(step = "start")}}{Set the elapsed time between processes}

\item{\code{transformMiData()}}{Format imputed data sets after parallelMice()}

\item{\code{typeData()}}{Populate a vector containing each variable's type}

\item{\code{updateImpFails(x, type)}}{Update the list of imputation failure records}
}}

